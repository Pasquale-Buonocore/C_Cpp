/*
Preprocessor directives are lines included in the code of programs preceded by a hash sign (#). 
These lines are not program statements but directives for the preprocessor. 
The preprocessor examines the code before actual compilation of code begins and resolves all these directives before any code is actually generated by regular statements.

These preprocessor directives extend only across a single line of code. As soon as a newline character is found, the preprocessor directive is ends. 
No semicolon (;) is expected at the end of a preprocessor directive. 
The only way a preprocessor directive can extend through more than one line is by preceding the newline character at the end of the line by a backslash (\).



--- macro definitions (#define, #undef) ---
#define X 10
#define getmax(a,b) a>b?a:b 



--- Conditional inclusions (#ifdef, #ifndef, #if, #endif, #else and #elif) ---

--- Line control (#line) ---

--- Error directive (#error) ---

--- Source file inclusion (#include) ---

This directive has been used assiduously in other sections of this tutorial. 
When the preprocessor finds an #include directive it replaces it by the entire content of the specified header or file. 

There are two ways to use #include:
        #include <header>
        #include "file" 

In the first case, a header is specified between angle-brackets <>. 
This is used to include headers provided by the implementation, such as the headers that compose the standard library (iostream, string,...). 
Whether the headers are actually files or exist in some other form is implementation-defined, but in any case they shall be properly included with this directive.


--- Pragma directive (#pragma) ---
It is used to provide additional information to the compiler about how to handle certain parts of the code during the compilation process.
The #pragma directive is followed by an identifier that specifies the specific behavior that the compiler should take. 
For example, #pragma once is used to ensure that a header file is included only once in a compilation unit. 
Other common uses of #pragma include specifying optimization options, setting alignment, or disabling warnings.

Here's an example of how #pragma once can be used in a C++ header file:
    #pragma once

    class MyClass {
    public:
        void myMethod();
    };

In this example, #pragma once is used to ensure that the header file is only included once in the compilation unit. 
This can help to prevent multiple definitions of the same class or function, which can cause linker errors.


*/
